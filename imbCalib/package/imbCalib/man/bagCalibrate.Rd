% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calibrate.R
\name{bagCalibrate}
\alias{bagCalibrate}
\title{Bagged undersampled calibration.}
\usage{
bagCalibrate(
  trainset,
  newX,
  response_name,
  model,
  formula = as.factor(y) ~ .,
  pos_label = 1,
  nbags = 25,
  ntimes = 1,
  ncluster = 4,
  ...
)
}
\arguments{
\item{trainset}{A dataframe. The training dataset.}

\item{newX}{An array. The feature matrix of the new test data.}

\item{response_name}{A string. The name of the response column in the training dataset.}

\item{model}{A string. The model to calibrate. Options: \code{'svm'}, \code{'lr'}, \code{'nb'}, \code{'rf'}.}

\item{formula}{A formula. The formula of the model.}

\item{pos_label}{An integer. 0 or 1. The label for the positive class.}

\item{nbags}{An integer. How many sample set are used for bagging. Note that a large value
will not lead to overfitting and will reduce the variance more, with the only cost being
heavy computation load.}

\item{ntimes}{An integer. The number of times to run the model within each sample set.
When \code{ntimes=1}, the output is the simple average of \code{nbags} sets of probabilities,
and when \code{ntimes > 1}, the output is the weighted average, with the weight being the empirical
variance of \code{ntimes} predicted probabilities within each sample set.}

\item{ncluster}{An integer. The number of clusters to use in the parallel implementaion.}

\item{...}{Arguments with variable lengths. The extra arguments for specifying the model.}
}
\value{
A numeric vector. The calibrated probabilities by weighted bagged undersampled method.
}
\description{
Bagged undersampled calibration, can do both the weighted average and
simple average on the bagged probabilities.
Parallel computing is enabled to speed up the bagging procedure by specifying \code{ncluster}.
Choose between weighted average of bagged probabilities or simple average using \code{ntimes}.
}
\details{
The simple average and the weighted average of the bagged probabilities are defined
as below.

Simple average:
\deqn{\hat{P}(y_i | x_i) = \frac{1}{k}\sum_{j=1}^k \hat{P}_j(y_i | f_{ij})}

Weighted average:
\deqn{\hat{P}(y_i | x_i) = \frac{1}{z}\sum_{j=1}^k \frac{1}{\text{Var}(\hat{P}_j(y_i | f_{ij}))}  \hat{P}_j(y_i | f_{ij}),}
where \deqn{z = \sum_{j=1}^k \frac{1}{\text{Var}(\hat{P}_j(y_i | f_{ij}))}.}
}
\examples{
data(imbalance)
set.seed(123)
split <- sample.split(imbalance$y, SplitRatio = 0.75)
train_set <- subset(imbalance, split == TRUE)
test_set <- subset(imbalance, split == FALSE)
X.test <- subset(test_set, select = -y)
y.test <- subset(test_set, select = y)[,1]
# standard calibration
svc <- svm(formula = as.factor(y) ~ ., data = train_set, type = 'C-classification',
  kernel = 'linear', probability = TRUE)
pred <- predict(svc, X.test, probability = TRUE)
dec.svc <- attr(pred, 'decision.values')
prob.svc <- as.data.frame(attr(pred, "probabilities"))$`1`
stratifiedBrier(y.test, prob.svc)
# calibration using bagged undersampling method (simple average)
bag.prob.svm <- bagCalibrate(train_set, X.test, 'y', model='svm', type = 'C-classification',
  kernel = 'linear', nbags = 30, ntimes = 1, ncluster = 4)
stratifiedBrier(y.test, bag.prob.svm)
# calibration using weighted bagged undersampling method (weighted average)
weighted.bag.prob.svm <- bagCalibrate(train_set, X.test, 'y', model='svm', type = 'C-classification',
  kernel = 'linear', nbags = 30, ntimes = 20, ncluster = 4)
stratifiedBrier(y.test, weighted.bag.prob.svm)

# comparison plot
comparisonPlot(y.test, list(prob.svc, bag.prob.svm, weighted.bag.prob.svm),
  c("SVM", "bagged-under SVM", "Weighted-bagged-under SVM"), nbins = 8)

}
\references{
Wallace, B.C., Dahabreh, I.J. Improving class probability estimates for imbalanced data.
Knowl Inf Syst 41, 33â€“52 (2014). https://doi.org/10.1007/s10115-013-0670-6
}
